options {
    MULTI=true;
    STATIC=false;
    VISITOR=true;
//    VISITOR_RETURN_TYPE="VisitorData";
    VISITOR_DATA_TYPE="VisitorData";
    NODE_DEFAULT_VOID=true;
//    DEBUG_PARSER = true;
}

PARSER_BEGIN(FilterParser)
package loggerplusplus.filter.parser;
import loggerplusplus.filter.Operator;
import loggerplusplus.filter.BooleanOperator;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.regex.Pattern;
import java.util.HashMap;
import java.math.BigDecimal;

public class FilterParser {
    public static ASTExpression parseFilter(String string) throws IOException, ParseException {
        FilterParser FilterParser = new FilterParser(new StringReader(string));
        ASTExpression node = FilterParser.Filter();
        VisitorData result = new FilterParserIdentifierTypeCheckVisitor().visit(node);
        if(!result.isSuccess()) throw new ParseException(result.getErrorString());
        return node;
    }
}

PARSER_END(FilterParser)

SKIP:  { " " }
TOKEN [IGNORE_CASE]: {
    <EQ: "=" | "==" >
    | <NEQ: "!=" >
    | <GT: ">" >
    | <LT: "<" >
    | <GEQ: ">=" >
    | <LEQ: "<=" >
    | <OR: "|" | "||" | "OR" >
    | <AND: "&" | "&&" | "AND" >
    | <XOR: "^" | "XOR" >
    | <CONTAINS: "CONTAINS" >
    | <BOOLEAN: "TRUE" | "FALSE">
    | <SINGLEQUOTEDSTRING: "'" ("\\" ~[] | ~["\'", "\\"])* "'" >
    | <DOUBLEQUOTEDSTRING: "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >
    | <NUMBER: ("-"|"+")?(<DIGIT>)+("."(<DIGIT>)+)?>
    | <DIGIT: ["0"-"9"] >
    | <REGEXLITERAL: "/\\Q" ("\\" ~["E"] | ~["\\"])* "\\E/" >
    | <REGEX: "/" ("\\" ~[] | ~["/", "\\"])* "/" >
    | <LPAREN: "(" >
    | <RPAREN: ")" >
    | <INVERSE: "!" | "NOT" >
    | <DOT: "." >
    | <IDENTIFIER: (["a"-"z","A"-"Z"])+ >
}



ASTExpression Filter() #Expression :
{
 Boolean inverse=false;
 loggerplusplus.filter.BooleanOperator op = null;
}
{
    (LOOKAHEAD(2) [inverse=Inverse()] <LPAREN> ExpressionInner() [(op=And() ExpressionInner())+ | (op=Or() ExpressionInner())+ | (op=Xor() ExpressionInner())+] <RPAREN>
    | ExpressionInner() [(op=And() ExpressionInner())+ | (op=Or() ExpressionInner())+ | (op=Xor() ExpressionInner())+])

    <EOF>
    {
        jjtThis.op = op;
        jjtThis.inverse = inverse;
        return jjtThis;
    }
}

ASTExpression Expression() #Expression :
{
 Boolean inverse = null;
 loggerplusplus.filter.BooleanOperator op = null;
}
{
    //Recursive to handle brackets nicely - optional invertor
    (LOOKAHEAD(2) [inverse=Inverse()] <LPAREN> ExpressionInner() [(op=And() ExpressionInner())+ | (op=Or() ExpressionInner())+ | (op=Xor() ExpressionInner())+] <RPAREN>
    | Comparison())

    {
        jjtThis.op = op;
        jjtThis.inverse = inverse != null;
        return jjtThis;
    }
}

void ExpressionInner() #void :
{}
{
    (LOOKAHEAD(3) Comparison() | Expression())
}


//Comparisons can take two forms (Value) or (value operation value).
//To make interpretation easier, we convert (Value) to (Value operation value) by means of (Value EQUALS TRUE)
ASTComparison Comparison() #Comparison:
{
 Operator op;
 Object left, right;
 Boolean value;
}
{
    left = Value()
    {
        jjtThis.left = left;
    }

    (op = Operator() right = Value()
        {
            jjtThis.right = right;
            jjtThis.operator = op;
        }
    | //OR EMPTY
        {
            jjtThis.operator = Operator.EQUAL;
            jjtThis.right = true;
        }
    )
    {return jjtThis;}
}

Object Value() #void:
{
    Object v;
}
{
    (LOOKAHEAD(2) v = Identifier() | v = Number() | v = Boolean() | v = String() | v = Regex())
    {return v;}
}


//IDENTIFIERS
ASTIdentifier Identifier() #Identifier:
{
    Token group, identifier, inverse = null;
}
{
    [inverse=<INVERSE>] group=<IDENTIFIER> <DOT> identifier=<IDENTIFIER>
    {
        jjtThis.inverse = inverse != null;
        jjtThis.group = group.image;
        jjtThis.field = identifier.image;
        return jjtThis;
    }
}

//END IDENTIFIERS


//TYPES

BigDecimal Number() #void :
{Token t;}
{
    t=<NUMBER>
    {return new BigDecimal(t.image);}
}

String String() #void :
{Token t;}
{
    ( t=<SINGLEQUOTEDSTRING> | t=<DOUBLEQUOTEDSTRING> )

    {
        String s = t.image.substring(1,t.image.length()-1);
        return org.apache.commons.text.StringEscapeUtils.unescapeJava(s);
    }
}

Pattern Regex() #void :
{Token t;}
{
    ( t=<REGEXLITERAL> | t=<REGEX> )
    {
        return Pattern.compile(t.image.substring(1,t.image.length()-1), Pattern.CASE_INSENSITIVE);
    }
}

Boolean Boolean() #void :
{Token t, inverse=null;}
{
    [inverse=<INVERSE>]
    t=<BOOLEAN>
    {
        return (inverse != null ^ Boolean.parseBoolean(t.image));
    }
}

//END TYPES


//BASIC OPERATORS

Operator Operator() #void :
{}
{
      <EQ>  {return Operator.EQUAL;}
    | <NEQ> {return Operator.NOT_EQUAL;}
    | <GT>  {return Operator.GREATER_THAN;}
    | <LT>  {return Operator.LESS_THAN;}
    | <GEQ> {return Operator.GREATER_THAN_EQUAL;}
    | <LEQ> {return Operator.LESS_THAN_EQUAL;}
    | <CONTAINS> {return Operator.CONTAINS;}
}

boolean Inverse() #void :
{}
{
    <INVERSE> {return true;}
}

BooleanOperator And() #void :
{}
{
    <AND> {return BooleanOperator.AND;}
}

BooleanOperator Or() #void :
{}
{
    <OR> {return BooleanOperator.OR;}
}

BooleanOperator Xor() #void :
{}
{
    <XOR> {return BooleanOperator.XOR;}
}