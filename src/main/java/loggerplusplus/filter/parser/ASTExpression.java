/* Generated By:JJTree: Do not edit this line. ASTExpression.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package loggerplusplus.filter.parser;

import loggerplusplus.filter.BooleanOperator;

public
class ASTExpression extends SimpleNode {

  boolean inverse = false;
  BooleanOperator op;

  public ASTExpression(int id) {
    super(id);
  }

  public ASTExpression(FilterParser p, int id) {
    super(p, id);
  }

  @Override
  public String toString() {
    return String.format("%s, [%d children, Inverse:%b, Join Op:%s]", super.toString(), this.jjtGetNumChildren(), inverse, op);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(FilterParserVisitor visitor, VisitorData data) {

    return
    visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=f3e2fc4905864ee71fff41d667f32963 (do not edit this line) */
