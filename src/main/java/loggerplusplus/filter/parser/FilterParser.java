/* FilterParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. FilterParser.java */
package loggerplusplus.filter.parser;
import loggerplusplus.filter.Operator;
import loggerplusplus.filter.BooleanOperator;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.regex.Pattern;
import java.util.HashMap;

public class FilterParser/*@bgen(jjtree)*/implements FilterParserTreeConstants, FilterParserConstants {/*@bgen(jjtree)*/
  protected JJTFilterParserState jjtree = new JJTFilterParserState();
    public FilterParser(String s){
        this(new StringReader(s));
    }

    public static void main(String[] args) throws IOException {
        String str;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        while(!(str = in.readLine()).equalsIgnoreCase("END")) {
            try {
                SimpleNode root = parseFilter(str);
                root.dump("");
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    public static SimpleNode parseFilter(String string) throws IOException, ParseException {
        FilterParser FilterParser = new FilterParser(string);
        SimpleNode node = FilterParser.Filter();
        return node;
    }

  final public ASTExpression Filter() throws ParseException {    try {
/*@bgen(jjtree) Expression */
 ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Boolean inverse=false;
 loggerplusplus.filter.BooleanOperator op = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case INVERSE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INVERSE:{
            inverse = Inverse();
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          jj_consume_token(LPAREN);
          Expression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OR:
          case AND:
          case XOR:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:{
              label_1:
              while (true) {
                op = And();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case AND:{
                  ;
                  break;
                  }
                default:
                  jj_la1[1] = jj_gen;
                  break label_1;
                }
              }
              break;
              }
            case OR:{
              label_2:
              while (true) {
                op = Or();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case OR:{
                  ;
                  break;
                  }
                default:
                  jj_la1[2] = jj_gen;
                  break label_2;
                }
              }
              break;
              }
            case XOR:{
              label_3:
              while (true) {
                op = Xor();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case XOR:{
                  ;
                  break;
                  }
                default:
                  jj_la1[3] = jj_gen;
                  break label_3;
                }
              }
              break;
              }
            default:
              jj_la1[4] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
          }
        case BOOLEAN:
        case SINGLEQUOTEDSTRING:
        case DOUBLEQUOTEDSTRING:
        case NUMBER:
        case REGEXLITERAL:
        case REGEX:
        case IDENTIFIER:{
          Expression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OR:
          case AND:
          case XOR:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:{
              label_4:
              while (true) {
                op = And();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case AND:{
                  ;
                  break;
                  }
                default:
                  jj_la1[6] = jj_gen;
                  break label_4;
                }
              }
              break;
              }
            case OR:{
              label_5:
              while (true) {
                op = Or();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case OR:{
                  ;
                  break;
                  }
                default:
                  jj_la1[7] = jj_gen;
                  break label_5;
                }
              }
              break;
              }
            case XOR:{
              label_6:
              while (true) {
                op = Xor();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case XOR:{
                  ;
                  break;
                  }
                default:
                  jj_la1[8] = jj_gen;
                  break label_6;
                }
              }
              break;
              }
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.op = op;
        jjtn000.inverse = inverse;
        {if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Filter");
    }
}

  final public ASTExpression Expression() throws ParseException {    try {
/*@bgen(jjtree) Expression */
 ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Boolean inverse = null;
 loggerplusplus.filter.BooleanOperator op = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case INVERSE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INVERSE:{
            inverse = Inverse();
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case SINGLEQUOTEDSTRING:
          case DOUBLEQUOTEDSTRING:
          case NUMBER:
          case REGEXLITERAL:
          case REGEX:
          case INVERSE:
          case IDENTIFIER:{
            Comparison();
            break;
            }
          case LPAREN:{
            Expression();
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OR:
          case AND:
          case XOR:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AND:{
              label_7:
              while (true) {
                op = And();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case AND:{
                  ;
                  break;
                  }
                default:
                  jj_la1[14] = jj_gen;
                  break label_7;
                }
              }
              break;
              }
            case OR:{
              label_8:
              while (true) {
                op = Or();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case OR:{
                  ;
                  break;
                  }
                default:
                  jj_la1[15] = jj_gen;
                  break label_8;
                }
              }
              break;
              }
            case XOR:{
              label_9:
              while (true) {
                op = Xor();
                Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case XOR:{
                  ;
                  break;
                  }
                default:
                  jj_la1[16] = jj_gen;
                  break label_9;
                }
              }
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
          }
        case BOOLEAN:
        case SINGLEQUOTEDSTRING:
        case DOUBLEQUOTEDSTRING:
        case NUMBER:
        case REGEXLITERAL:
        case REGEX:
        case IDENTIFIER:{
          Comparison();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.op = op;
        jjtn000.inverse = inverse != null;
        {if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Expression");
    }
}

//Comparisons always made up of 3 nodes. Value Operation Value
  final public ASTComparison Comparison() throws ParseException {    try {
/*@bgen(jjtree) Comparison */
 ASTComparison jjtn000 = new ASTComparison(JJTCOMPARISON);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Operator op;
 Object left, right;
 Boolean value;
      try {
        left = Value();
        op = Operator();
        right = Value();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.left = left;
        jjtn000.right = right;
        jjtn000.operator = op;
        {if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Comparison");
    }
}

  final public ASTSimpleBoolean SimpleBoolean() throws ParseException {    try {
/*@bgen(jjtree) SimpleBoolean */
 ASTSimpleBoolean jjtn000 = new ASTSimpleBoolean(JJTSIMPLEBOOLEAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Object value;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          value = Identifier();
          break;
          }
        case BOOLEAN:
        case INVERSE:{
          value = Boolean();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.value = value;
        {if ("" != null) return jjtn000;}
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SimpleBoolean");
    }
}

  final public Object Value() throws ParseException {    try {
Object v;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        v = Identifier();
        break;
        }
      case NUMBER:{
        v = Number();
        break;
        }
      case BOOLEAN:
      case INVERSE:{
        v = Boolean();
        break;
        }
      case SINGLEQUOTEDSTRING:
      case DOUBLEQUOTEDSTRING:{
        v = String();
        break;
        }
      case REGEXLITERAL:
      case REGEX:{
        v = Regex();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Value");
    }
}

//IDENTIFIERS
  final public String Identifier() throws ParseException {    try {
Token t;
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Identifier");
    }
}

//END IDENTIFIERS


//TYPES
  final public 
Float Number() throws ParseException {    try {
Token t;
      t = jj_consume_token(NUMBER);
{if ("" != null) return Float.parseFloat(t.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Number");
    }
}

  final public String String() throws ParseException {    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SINGLEQUOTEDSTRING:{
        t = jj_consume_token(SINGLEQUOTEDSTRING);
        break;
        }
      case DOUBLEQUOTEDSTRING:{
        t = jj_consume_token(DOUBLEQUOTEDSTRING);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
String s = t.image.substring(1,t.image.length()-1);
        {if ("" != null) return org.apache.commons.text.StringEscapeUtils.unescapeJava(s);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("String");
    }
}

  final public Pattern Regex() throws ParseException {    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGEXLITERAL:{
        t = jj_consume_token(REGEXLITERAL);
        break;
        }
      case REGEX:{
        t = jj_consume_token(REGEX);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return Pattern.compile(t.image.substring(1,t.image.length()-1), Pattern.CASE_INSENSITIVE);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Regex");
    }
}

  final public Boolean Boolean() throws ParseException {    try {
Token t, inverse=null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INVERSE:{
        inverse = jj_consume_token(INVERSE);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      t = jj_consume_token(BOOLEAN);
{if ("" != null) return (inverse != null ^ Boolean.parseBoolean(t.image));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Boolean");
    }
}

//END TYPES


//BASIC OPERATORS
  final public 
Operator Operator() throws ParseException {    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
{if ("" != null) return Operator.EQUAL;}
        break;
        }
      case NEQ:{
        jj_consume_token(NEQ);
{if ("" != null) return Operator.NOT_EQUAL;}
        break;
        }
      case GT:{
        jj_consume_token(GT);
{if ("" != null) return Operator.GREATER_THAN;}
        break;
        }
      case LT:{
        jj_consume_token(LT);
{if ("" != null) return Operator.LESS_THAN;}
        break;
        }
      case GEQ:{
        jj_consume_token(GEQ);
{if ("" != null) return Operator.GREATER_THAN_EQUAL;}
        break;
        }
      case LEQ:{
        jj_consume_token(LEQ);
{if ("" != null) return Operator.LESS_THAN_EQUAL;}
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Operator");
    }
}

  final public boolean Inverse() throws ParseException {    try {

      jj_consume_token(INVERSE);
{if ("" != null) return true;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Inverse");
    }
}

  final public BooleanOperator And() throws ParseException {    try {

      jj_consume_token(AND);
{if ("" != null) return BooleanOperator.AND;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("And");
    }
}

  final public BooleanOperator Or() throws ParseException {    try {

      jj_consume_token(OR);
{if ("" != null) return BooleanOperator.OR;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Or");
    }
}

  final public BooleanOperator Xor() throws ParseException {    try {

      jj_consume_token(XOR);
{if ("" != null) return BooleanOperator.XOR;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Xor");
    }
}

  /** Generated Token Manager. */
  public FilterParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x100000,0x200,0x100,0x400,0x700,0x700,0x200,0x100,0x400,0x700,0x700,0x377800,0x100000,0x377800,0x200,0x100,0x400,0x700,0x700,0x377800,0x300800,0x337800,0x3000,0x30000,0x100000,0xfc,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public FilterParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FilterParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new FilterParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FilterParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new FilterParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FilterParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FilterParser(FilterParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FilterParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[22];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 26; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 22; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
