/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Filter.jj */
/*@egen*/options {
               
    STATIC=false;
    LOOKAHEAD=3;
//    DEBUG_PARSER = true;
}

PARSER_BEGIN(FilterParser)
package loggerplusplus.filter.parser;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.regex.Pattern;
import java.util.HashMap;

public class FilterParser/*@bgen(jjtree)*/implements FilterParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFilterParserState jjtree = new JJTFilterParserState();

/*@egen*/

    private static HashMap<String, Class> identifierClasses = new HashMap(){{
        put("test", Boolean.class);
    }};

    public FilterParser(String s){
        this(new StringReader(s));
    }

    public static void main(String[] args) throws IOException {
        String str;
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        while(!(str = in.readLine()).equalsIgnoreCase("END")) {
            try {
                SimpleNode root = parseFilter(str);
                root.dump("");
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
            }
        }
    }

    public static SimpleNode parseFilter(String string) throws IOException, ParseException {
        FilterParser FilterParser = new FilterParser(string);
        SimpleNode node = FilterParser.Root();
        return node;
    }
}

PARSER_END(FilterParser)

SKIP:  { " " }
TOKEN [IGNORE_CASE]: {
    <EQ: "=" | "==" >
    | <NEQ: "!=" >
    | <GT: ">" >
    | <LT: "<" >
    | <GEQ: ">=" >
    | <LEQ: "<=" >
    | <OR: "|" | "||" | "OR" >
    | <AND: "&" | "&&" | "AND" >
    | <XOR: "^" | "XOR">
    | <BOOLEAN: "TRUE" | "FALSE">
    | <SINGLEQUOTEDSTRING: "'" ("\\" ~[] | ~["\'", "\\"])* "'" >
    | <DOUBLEQUOTEDSTRING: "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >
    | <NUMBER: ("-"|"+")?(<DIGIT>)+("."(<DIGIT>)+)?>
    | <DIGIT: ["0"-"9"] >
    | <REGEXLITERAL: "/\\Q" ("\\" ~["E"] | ~["\\"])* "\\E/" >
    | <REGEX: "/" ("\\" ~[] | ~["/", "\\"])* "/" >
    | <LPAREN: "(" >
    | <RPAREN: ")" >
    | <INVERSE: "!" | "NOT" >
    | <CONTAINS: "CONTAINS" | "IN" >
    | <BOOLEANIDENTIFIER: "COMPLETE" | "PARAMS" | "ISSSL" | "HASQUERYSTRINGPARAM" | "HASBODYPARAM" | "HASCOOKIEPARAM" | "HASSETCOOKIES" >
    | <STRINGIDENTIFIER: (["a"-"z","A"-"Z"])+ >
    | <NUMERICIDENTIFIER: (["a"-"z","A"-"Z"])+ >
}

SimpleNode Root()       :
{/*@bgen(jjtree) ROOT */
  ASTROOT jjtn000 = new ASTROOT(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ROOT */
    try {
/*@egen*/
    Filter() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode Filter()         :
{/*@bgen(jjtree) FILTER */
 ASTFILTER jjtn000 = new ASTFILTER(JJTFILTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token inverse = null;}
{/*@bgen(jjtree) FILTER */
    try {
/*@egen*/
    ( //Recursive to handle brackets nicely optional invertor
        [inverse=<INVERSE>] <LPAREN> Filter() <RPAREN>
        | Expression()
    )

    ((And() | Or() | Xor()) Filter())*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.inverse = inverse != null;
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()            :
{/*@bgen(jjtree) EXPRESSION */
    ASTEXPRESSION jjtn000 = new ASTEXPRESSION(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    ASTIDENTIFIER leftIdentifier = null, rightIdentifier = null;
}
{/*@bgen(jjtree) EXPRESSION */
    try {
/*@egen*/

    Identifier() (BooleanComparison() | NumericalComparison() | StringComparison()) //Identifier OP Value
    | Identifier() (Eq() | Neq() | Xor() | Lt() | Leq() | Gt() | Geq()) Identifier()//Identifier - Identifier Comparison - ALL OPS
    | (Number() | String() | Regex()) (Eq() | Neq()) Identifier()                   //Standard EQ/NEQ Ops - Value OP Identifier
    | Number() (Lt() | Leq() | Gt() | Geq()) Identifier()                           //Number Specific Ops - Number OP Identifier
    | Boolean() Xor() Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/                                                  //Boolean Specific Op - Boolean OP Identifier
}

void BooleanComparison():
{/*@bgen(jjtree) BooleanComparison */
  ASTBooleanComparison jjtn000 = new ASTBooleanComparison(JJTBOOLEANCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanComparison */
    try {
/*@egen*/
    (Eq() | Neq() | Xor()) Boolean()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NumericalComparison():
{/*@bgen(jjtree) NumericalComparison */
  ASTNumericalComparison jjtn000 = new ASTNumericalComparison(JJTNUMERICALCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumericalComparison */
    try {
/*@egen*/
    (Eq() | Neq() | Lt() | Gt() | Leq() | Geq()) Number()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringComparison():
{/*@bgen(jjtree) StringComparison */
  ASTStringComparison jjtn000 = new ASTStringComparison(JJTSTRINGCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringComparison */
    try {
/*@egen*/
    (Eq() | Neq() | Lt() | Gt() | Leq() | Geq()) (String() | Regex())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Float Number()         :
{/*@bgen(jjtree) NUMBER */
 ASTNUMBER jjtn000 = new ASTNUMBER(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NUMBER */
    try {
/*@egen*/
    t=<NUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.value = Float.parseFloat(t.image); return (Float) jjtn000.value;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String String()         :
{/*@bgen(jjtree) STRING */
 ASTSTRING jjtn000 = new ASTSTRING(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) STRING */
    try {
/*@egen*/
    ( t=<SINGLEQUOTEDSTRING> | t=<DOUBLEQUOTEDSTRING> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {
        jjtn000.value = t.image.substring(1,t.image.length()-1);
        return org.apache.commons.text.StringEscapeUtils.unescapeJava((String) jjtn000.value);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Pattern Regex()        :
{/*@bgen(jjtree) REGEX */
 ASTREGEX jjtn000 = new ASTREGEX(JJTREGEX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) REGEX */
    try {
/*@egen*/
    ( t=<REGEXLITERAL> | t=<REGEX> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return Pattern.compile(t.image.substring(1,t.image.length()-1), Pattern.CASE_INSENSITIVE);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode BooleanIdentifier()                    :
{/*@bgen(jjtree) BOOLEANIDENTIFIER */
 ASTBOOLEANIDENTIFIER jjtn000 = new ASTBOOLEANIDENTIFIER(JJTBOOLEANIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, inverse=null;}
{/*@bgen(jjtree) BOOLEANIDENTIFIER */
    try {
/*@egen*/
    [inverse=<INVERSE>]
    t=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.data.put("inverse", inverse != null);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Boolean Boolean()          :
{/*@bgen(jjtree) BOOLEAN */
 ASTBOOLEAN jjtn000 = new ASTBOOLEAN(JJTBOOLEAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, inverse=null;}
{/*@bgen(jjtree) BOOLEAN */
    try {
/*@egen*/
    [inverse=<INVERSE>]
    t=<BOOLEAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = (inverse != null ^ Boolean.parseBoolean(t.image));
        return (Boolean) jjtn000.value;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BooleanOperator() :
{/*@bgen(jjtree) BooleanOperator */
  ASTBooleanOperator jjtn000 = new ASTBooleanOperator(JJTBOOLEANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BooleanOperator */
    try {
/*@egen*/
    <EQ> | <NEQ> | <XOR>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Contains()           :
{/*@bgen(jjtree) CONTAINS */
  ASTCONTAINS jjtn000 = new ASTCONTAINS(JJTCONTAINS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONTAINS */
    try {
/*@egen*/
    <CONTAINS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Eq()     :
{/*@bgen(jjtree) EQ */
 ASTEQ jjtn000 = new ASTEQ(JJTEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) EQ */
    try {
/*@egen*/
    t=<EQ>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Neq()      :
{/*@bgen(jjtree) NEQ */
 ASTNEQ jjtn000 = new ASTNEQ(JJTNEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NEQ */
    try {
/*@egen*/
    t=<NEQ>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Gt()     :
{/*@bgen(jjtree) GT */
 ASTGT jjtn000 = new ASTGT(JJTGT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GT */
    try {
/*@egen*/
    t=<GT>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Geq()      :
{/*@bgen(jjtree) GEQ */
 ASTGEQ jjtn000 = new ASTGEQ(JJTGEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GEQ */
    try {
/*@egen*/
    t=<GEQ>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Lt()     :
{/*@bgen(jjtree) LT */
 ASTLT jjtn000 = new ASTLT(JJTLT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LT */
    try {
/*@egen*/
    t=<LT>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Leq()      :
{/*@bgen(jjtree) LEQ */
 ASTLEQ jjtn000 = new ASTLEQ(JJTLEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LEQ */
    try {
/*@egen*/
    t=<LEQ>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void And()      :
{/*@bgen(jjtree) AND */
 ASTAND jjtn000 = new ASTAND(JJTAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AND */
    try {
/*@egen*/
    t=<AND>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Or()     :
{/*@bgen(jjtree) OR */
 ASTOR jjtn000 = new ASTOR(JJTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OR */
    try {
/*@egen*/
    t=<OR>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void Xor()      :
{/*@bgen(jjtree) XOR */
 ASTXOR jjtn000 = new ASTXOR(JJTXOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) XOR */
    try {
/*@egen*/
    t=<XOR>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}